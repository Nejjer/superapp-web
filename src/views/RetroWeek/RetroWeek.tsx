import { FC, useEffect, useState } from "react";
import { Button, Center, CloseButton, Container, Dialog, Field, Portal, SegmentGroup, Stack, Textarea } from "@chakra-ui/react";
import { axiosInstance } from "../../api/axiosInstance";
import { toaster } from "../../components/ui/toaster";
import { Card } from "../../components/Card";

interface ICheerUp {
    title: string;
    desc: string;
}

interface IResponse {
    productivity: string;
    done_tasks: string[];
    satisfaction: string
}

const cheerUpTexts: ICheerUp[] = [
    {
        title: "üéÄ –ì–æ—Ç–æ–≤–æ!",
        desc: `–¢—ã —É–º–Ω–∏—á–∫–∞ ‚ú®
–° –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª—É—á—à–µ üå±`,
    },
    {
        title: "üíå –ó–∞–ø–∏—Å–∞–Ω–æ~",
        desc: `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ üíñ
–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ —Å–≤–µ—Ç–ª–æ–≥–æ üå∏`,
    },
    {
        title: "üêæ –®–∞–∂–æ–∫ —Å–¥–µ–ª–∞–Ω!",
        desc: `–¢—ã —Å–¥–µ–ª–∞–ª —à–∞–≥ –≤–ø–µ—Ä–µ–¥ üöÄ
–° –∫–∞–∂–¥—ã–º –¥–Ω–µ–º —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏ üåü`,
    },
    {
        title: "‚úèÔ∏è –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
        desc: `–ó–∞–ø–∏—Å–∞–ª ‚Äî –∑–Ω–∞—á–∏—Ç, —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ üí™
–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏, –∫–æ—Ç–∏–∫ üê±`
    },
    {
        title: "üìö –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –≥–æ—Ç–æ–≤–∞!",
        desc: `–¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ, –∏ —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ üí´
–û–±–Ω–∏–º–∏ —Å–µ–±—è –º—ã—Å–ª–µ–Ω–Ω–æ ‚Äî —Ç—ã –∫–ª–∞—Å—Å–Ω—ã–π! ü´Çüíú`
    },
]

export const RetroWeek: FC = () => {
    const [productivity, setProductivity] = useState<string | null>("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ");
    const [done_tasks, setDone_tasks] = useState("");
    const [loading, setLoading] = useState(false);
    const [satisfaction, setSatisfaction] = useState<string | null>("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ");
    const [cheerUpText, setCheerUpText] = useState<ICheerUp>(cheerUpTexts[0]);
    const [dialogOpen, setDialogOpen] = useState(false);

    useEffect(() => {
        axiosInstance.get<IResponse>("/api/get-retro").then((response) => {
            const { productivity, done_tasks, satisfaction } = response.data;
            setProductivity(productivity);
            setDone_tasks(done_tasks.join('\n'));
            setSatisfaction(satisfaction);
        }).catch((error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö RetroWeek:", error);
            toaster.create({
                description: "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é",
                type: "info",
            })
        });
    }, []);

    const handleSubmit = async () => {
        setLoading(true);
        try {
            await axiosInstance.post("/api/add-retro", {
                productivity,
                done_tasks,
                satisfaction,
            });
            setCheerUpText(cheerUpTexts[Math.floor(Math.random() * cheerUpTexts.length)])
            setDialogOpen(true);
        } catch (error) {
            toaster.create({
                description: "–ß–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å",
                type: "info",
            })
        } finally {
            setLoading(false);
        }
    };



    return (
        <Container paddingTop='20vh'>
            <Center>
                <Card radius={'12px'} header="–†–µ—Ç—Ä–æ –Ω–µ–¥–µ–ª–∏" >
                    <form>
                        <Stack gap="24px">
                            <Field.Root required>
                                <Field.Label>
                                    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                                </Field.Label>
                                <SegmentGroup.Root defaultValue="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" value={productivity} onValueChange={value => setProductivity(value.value)}>
                                    <SegmentGroup.Indicator />
                                    <SegmentGroup.Items items={["–ü–ª–æ—Ö–æ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "–•–æ—Ä–æ—à–æ"]} />
                                </SegmentGroup.Root>
                            </Field.Root>

                            <Field.Root required>
                                <Field.Label>
                                    –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                                </Field.Label>
                                <SegmentGroup.Root defaultValue="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" value={satisfaction} onValueChange={value => setSatisfaction(value.value)}>
                                    <SegmentGroup.Indicator />
                                    <SegmentGroup.Items items={["–ü–ª–æ—Ö–æ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "–•–æ—Ä–æ—à–æ"]} />
                                </SegmentGroup.Root>
                            </Field.Root>

                            <Field.Root required>
                                <Field.Label>
                                    –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –∑–∞ –Ω–µ–¥–µ–ª—é?
                                </Field.Label>
                                <Textarea value={done_tasks} onChange={(e) => setDone_tasks(e.target.value)} placeholder="—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å" />
                            </Field.Root>
                            <Button loading={loading} onClick={handleSubmit} disabled={!done_tasks}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
                        </Stack>
                    </form>
                </Card>
                <Dialog.Root open={dialogOpen} onOpenChange={(val) => setDialogOpen(val.open)}>
                    <Portal>
                        <Dialog.Backdrop />
                        <Dialog.Positioner>
                            <Dialog.Content>
                                <Dialog.Header>
                                    <Dialog.Title>{cheerUpText.title}</Dialog.Title>
                                </Dialog.Header>
                                <Dialog.Body>
                                    <p>
                                        {cheerUpText.desc}
                                    </p>
                                </Dialog.Body>
                                <Dialog.Footer>
                                    <Dialog.ActionTrigger asChild>
                                        <Button >–ó–∞–∫—Ä—ã—Ç—å</Button>
                                    </Dialog.ActionTrigger>

                                </Dialog.Footer>
                                <Dialog.CloseTrigger asChild>
                                    <CloseButton size="sm" />
                                </Dialog.CloseTrigger>
                            </Dialog.Content>
                        </Dialog.Positioner>
                    </Portal>
                </Dialog.Root>
            </Center>
        </Container>
    )
}